# -*- coding: utf-8 -*-
"""CNNforSkin disease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19yVI-HydLHF__J3-mVGwK3K2Tx9Utxk4

Paketler
"""

import tensorflow as tf
import os
import cv2
import imghdr
from matplotlib import pyplot as plt
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, BatchNormalization
from tensorflow.keras.metrics import SparseCategoricalAccuracy
from keras.utils import to_categorical
from tensorflow.keras.callbacks import EarlyStopping
#from tensorflow.keras.models import load_model
tf.random.set_seed(42)
drive.mount('/content/drive')

"""ekran kartımız gpu dan daha kuvetli ise onun kullanılması ile ilgili bir komut yazıyoruz"""

gpus = tf.config.experimental.list_physical_devices("GPU")
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)

"""Verimizi tanıtıyoruz"""

data_dir = "/content/drive/MyDrive/Colab Notebooks/DeriHastaliklari/DeriHastaliklari"
data = tf.keras.utils.image_dataset_from_directory(data_dir)
data = data.map(lambda x, y: (x / 255, tf.cast(y, dtype=tf.int32)))

"""Özetle, bu komut muhtemelen bir dizinin içindeki görüntüleri filtrelemek ve temizlemek amacıyla tasarlanmıştır. Geçerli uzantılara sahip olmayan veya OpenCV kullanılarak düzgün okunamayan görüntüler kaldırılır. Muhtemelen kodun başka bir yerinde image_exts değişkeninde tanımlanan izin verilen görüntü uzantıları bulunmaktadır."""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# for image_class in os.listdir(data_dir):
#     for image in os.listdir(os.path.join(data_dir,image_class)):
#         image_path = os.path.join(data_dir,image_class, image)
#         try:
#             img = cv2.imread(image_path)
#             tip = imghdr.what(image_path)
#             if tip not in image_exts:
#                 print("Image not in ext list {}".format(image_path))
#                 os.remove(image_path)
#         except Exception as e:
#             print("Issue with image {} ".format(image_path))
#

"""Görüntü verilerinden TensorFlow veri kümesi oluşturuyor, veri kümesi üzerinde dolaşmak için bir yineleyici oluşturuyor ve ardından bir sonraki veri batch'ini NumPy dizileri olarak alıyor. Bu, TensorFlow ile büyük veri kümeleri üzerinde eğitim veya değerlendirme sırasında yaygın olarak kullanılan bir desen."""

data = tf.keras.utils.image_dataset_from_directory(data_dir)
data_iterator = data.as_numpy_iterator()
batch = data_iterator.next()

"""Gorsellestirme

bir alt grafik oluşturur, toplu işteki ilk dört görüntüyü görüntüler ve alt grafiklerin başlıklarını ilgili etiketlere ayarlar. Bu, etiketleriyle birlikte küçük bir görüntü örneğini görsel olarak incelemek için kullanışlıdır.
"""

fig, ax = plt.subplots(ncols=4 , figsize = (20,20))
for idx, img in enumerate(batch[0][:4]):
    ax[idx].imshow(img.astype(int))
    ax[idx].title.set_text(batch[1][idx])

"""bu kod bir TensorFlow görüntü veri kümesini (veri) alır, görüntülerin piksel değerlerini 255'e bölerek ölçeklendirir ve ardından ölçeklendirilmiş veri kümesini bir NumPy dizisine (toplu iş) dönüştürür. Piksel değerlerinin ölçeklendirilmesi, girdi değerlerinin normalleştirilmesine yardımcı olduğu için makine öğreniminde, özellikle görüntü verileri için yaygın bir ön işleme adımıdır."""

data = data.map(lambda x, y: (x/255 ,y))
scaled_iterator = data.as_numpy_iterator()
batch = scaled_iterator.next()

"""alt grafik oluşturur, toplu işteki ilk dört orijinal görüntüyü görüntüler (piksel değerlerini ölçeklendirmeden) ve alt grafiklerin başlıklarını ilgili etiketlere ayarlar. Görüntüleri orijinal halleriyle görselleştirmenize olanak tanır."""

fig, ax = plt.subplots(ncols=4 , figsize = (20,20))
for idx, img in enumerate(batch[0][:4]):
    ax[idx].imshow(img)
    ax[idx].title.set_text(batch[1][idx])

"""Test ve train olarak ayırma işlemi

bu kod bir veri kümesinin eğitim, doğrulama ve test kümelerine genel bir bölünmesini gerçekleştirmektedir. Bu kümelerin boyutları belirtilen yüzdelere göre belirlenir (eğitim için %70, doğrulama için %20 ve kalan test için). Alt kümeleri orijinal veri kümesinden çıkarmak için take ve skip yöntemleri kullanılır
"""

train_size = int(len(data) * 0.7)
val_size = int(len(data) * 0.2)
test_size = len(data) - train_size - val_size

train = data.take(train_size)
val = data.skip(train_size).take(val_size)
test = data.skip(train_size + val_size).take(test_size)

"""Modeli oluşturma

Bu kod, evrişimli katmanlar, maksimum havuzlama katmanları ve tam bağlantılı katmanlar içeren bir CNN mimarisini tanımlar. Adam optimize edicisi ve seyrek kategorik crossentropy kaybı ile eğitim için derlenmiştir. Model, son yoğun katmanın çıktı boyutu ve sigmoid aktivasyonu ile belirtildiği gibi 10 sınıflı çok sınıflı bir sınıflandırma görevi için tasarlanmıştır.
"""

num_classes = 10
train = train.map(lambda x, y: (x, tf.one_hot(y, depth=num_classes)))
val = val.map(lambda x, y: (x, tf.one_hot(y, depth=num_classes)))

model.summary()

"""ML

Bu kod TensorBoard günlüğünü kurar, belirli sayıda epok için bir sinir ağı modelini eğitir ve eğitim süreci sırasında ve sonrasında görselleştirme için eğitim metriklerini günlüğe kaydeder.Eğitim geçmişi daha fazla analiz için saklanır.
"""

model = Sequential()
model.add(Conv2D(32, (3, 3), 1, activation="relu", input_shape=(256, 256, 3)))
model.add(MaxPooling2D())
model.add(Conv2D(64, (3, 3), 1, activation="relu"))
model.add(MaxPooling2D())
model.add(Conv2D(64, (3, 3), 1, activation="relu"))
model.add(MaxPooling2D())
model.add(Conv2D(32, (3, 3), 1, activation="relu"))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(512, activation="relu"))
model.add(Dropout(0.1))
model.add(Dense(10, activation="softmax"))
model.compile(optimizer="adam", loss='categorical_crossentropy', metrics=['accuracy'])

logdir = "logs"
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)
early_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)
hist = model.fit(train, epochs=30, validation_data=val, callbacks=[tensorboard_callback, early_stopping])

hist.history

"""Grafikle modelin ögrenimini incelem

Bu kod, bir çizgi grafiği kullanarak epoklar üzerindeki eğitim ve doğrulama kaybını görselleştirir.Eğitim kaybı deniz mavisi ile, doğrulama kaybı ise turuncu ile gösterilir. Gösterge, hangi çizginin eğitim kaybına ve hangisinin doğrulama kaybına karşılık geldiğini gösterir. Çizimin başlığı "kayıp" olarak ayarlanmıştır. Bu tür bir çizim, modelin eğitim verilerinden ne kadar iyi öğrendiğini ve görülmeyen doğrulama verilerine ne kadar genelleme yaptığını değerlendirmek için kullanışlıdır.
"""

fig = plt.figure()
plt.plot(hist.history["loss"], color = "teal" ,label = "loss")
plt.plot(hist.history["val_loss"], color = "orange" , label = "val_loss")
fig.suptitle("loss" ,fontsize = 20)
plt.legend(loc = "upper left")
plt.show()

"""Bu kod, bir çizgi grafiği kullanarak epoklar üzerindeki eğitim ve doğrulama doğruluğunu görselleştirir. Eğitim doğruluğu deniz mavisi renkte, doğrulama doğruluğu ise turuncu renkte çizilir. Gösterge, hangi çizginin eğitim doğruluğuna ve hangisinin doğrulama doğruluğuna karşılık geldiğini gösterir. Çizimin başlığı "Doğruluk" olarak ayarlanmıştır. Bu tür bir çizim, modelin eğitim verilerinden ne kadar iyi öğrendiğini ve doğruluk açısından görülmeyen doğrulama verilerine genelleme yaptığını değerlendirmeye yardımcı olur."""

fig = plt.figure()
plt.plot(hist.history["accuracy"] ,color = "teal" ,label = "accuracy")
plt.plot(hist.history["val_accuracy"], color = "orange", label = "val_accuracy")
fig.suptitle("Accuracy" , fontsize = 20)
plt.legend(loc = "upper left")
plt.show()

"""Bu kod, bir test veri kümesi üzerinde bir ikili sınıflandırma modeli için Kesinlik, Geri Çağırma ve İkili Doğruluk ölçümlerini hesaplar ve biriktirir. Metrikler toplu olarak güncellenir ve döngüden sonra, her bir metriğin result() yöntemini sorgulayarak nihai değerleri elde edebilirsiniz. Bu metrikler, test verileri üzerinde hassasiyet, geri çağırma ve genel doğruluk açısından modelin performansı hakkında bilgi sağlar."""

sample_batch = next(iter(test))
X_sample, y_sample = sample_batch
predictions = model.predict(X_sample)
print(predictions.shape)

acc = SparseCategoricalAccuracy()

for batch in test.as_numpy_iterator():
    X, y = batch
    yhat = model.predict(X)
    acc.update_state(y, yhat)

"""    Makinenin Öğrenim Sonucu"""

print(f'Precision:{acc.result().numpy()} ,Recall:{acc.result().numpy()}, BinaryAccuracy:{acc.result().numpy()}')

"""    Yapay zekamızı Test etme işlemleri:"""

img = cv2.imread("/Users/umayyentur/Downloads/egzama-kol.jpg")
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
img_float32 = img.astype(np.float32)
plt.show()

resize = tf.image.resize(img, (256,256))
plt.imshow(resize.numpy().astype(int))
plt.show()

yhat = model.predict(np.expand_dims(resize / 255, 0))
predicted_class = np.argmax(yhat)
confidence_score = yhat[0, predicted_class] * 100

class_names = ["Akne","Egzama", "herpes" ,"kurdesen","Melanom" ,"Rozase",
               "scabies ","Sedef", "siğil", "Vitiligo"]

disease = class_names[predicted_class]

if disease == "Akne":
    message = "Your disease is acne. This may be due to an unhealthy diet and lack of sleep."
elif disease == "Egzama":
    message = "Your disease is Egzama. It's crucial to consult with a dermatologist for further evaluation."
elif disease == "herpes":
    message = "Your disease is herpes. Consult with a dermatologist for appropriate management."
elif disease == "kurdesen":
    message = "Your disease is kurdesen. It's important to seek medical attention for proper treatment."
elif disease == "Melanom":
    message = "Your disease is Melanom. It's important to seek medical attention for proper treatment."
elif disease == "Rozase":
    message = "Your disease is Rozase. Avoid triggers like spicy foods and alcohol, and consider consulting a dermatologist."
elif disease == "scabies":
    message = "Your disease is scabies. Avoid triggers like spicy foods and alcohol, and consider consulting a dermatologist."
elif disease == "Sedef":
    message = "Your disease is psoriasis. Consult with a dermatologist for appropriate management."
elif disease == "siğil":
    message = "Your disease is athlete's foot. Make sure to keep your feet clean and dry."
elif disease == "Vitiligo":
    message = "Your disease is vitiligo. It's recommended to consult with a dermatologist for a comprehensive evaluation."
else:
    message = f"Your disease is {disease}."

print(f"There is a {confidence_score:.2f}% confidence that {message}")

"""Modeli için değerlendirme metriklerini özetleyen bir dize yazdırır"""

model.save(os.path.join("model","DeriHastaliklari.h5"))
new_model = load_model(os.path.join("model" , "DeriHastaliklari.h5"))
yhatnew = new_model.predict(np.expand_dims(resize/255 ,0))